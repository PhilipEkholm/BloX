// Generated by CoffeeScript 1.9.1

/*define ['common/canwz_app', 'jquery', 'crafty', 'display/user_handler'], (CanwzApp, $, Crafty, UserHandler) ->

  class BloxDisplay extends CanwzApp
    timers: []
    blocksinterval: null
    #winner: [] Ta bort om den inte behövs mer
    initialPosition: {}

    unload: (done) ->
      super =>
        _.each this.timers, (timer) ->
          clearTimeout(timer)
        UserHandler.get().off 'user_added', this.addUser.bind(this)
        UserHandler.get().off 'user_removed', this.removeUser.bind(this)
        done()
    
    didReceiveTouchEvent: (event, done) =>
      super event, =>
        ship = this.findShipForUser(event.connection_id)
        if ship?
          switch event.action
            when 'start'
              this.initialPosition[event.connection_id] = ship.pos()
            when 'move'
              touch = event.touches[0]
              initial = this.initialPosition[event.connection_id]
              if initial?
                ship.x = Crafty.math.clamp(
                  initial._x + touch.x * 2,
                  0 - ship.pos()._w /2,
                  1920 - ship.pos()._w / 2)
            when 'end'
              delete this.initialPosition[event.connection_id]
        done()
    
    addUser: (user) ->
      this.addShipForUser(user.color, user.connection_id)
      #this.addScoreTextForUser(user.color, user.connection_id)
      #this.layoutScoreTexts()
    
    removeUser: (user) =>
      ship = this.findShipForUser(user.connection_id)
      ship.destroy() if ship?

      #score = this.findScoreTextForUser(user.connection_id)
      #score.destroy() if score?

      #this.layoutScoreTexts()

    getWinnerColor: =>
      winner = _.min(Crafty('Ship').get(), (s) -> s._y)
      return winner._color if winner?

    findShipForUser: (connection_id) =>
      return _.find(Crafty('Ship').get(), (a) -> a.connection_id is connection_id)
    
    addShipForUser: (color, connection_id) ->
      ship = Crafty.e('Ship').attr({connection_id: connection_id, color: color })

      $(ship._element).css({'background-image' : ''})
      $.get 'img/ship.svg', (data) =>
        svg = $(data).find('svg')
        svg = svg.removeAttr('xmlns:a')
        svg.find('path').css({ fill: color }).attr('stroke', color)
        $(ship._element).append(svg)

    findScoreTextForUser: (connection_id) =>
      return _.find(Crafty('Score').get(), (h) -> h.connection_id is connection_id)

    addScoreTextForUser: (color, connection_id) =>
      Crafty.e('Score').attr({color: color, connection_id: connection_id })
      #score._color = color

    didLoad: (done) ->
      super =>
        this.app = this;
        this.setupCrafty()
        done()
    
    layoutScoreTexts: =>
      scores = Crafty('Score').get()
      for score, i in scores
        score.y = 1080 - (scores.length * 70) + i * 70
        score.x = 1920 - (scores.length * 70) + i * 70
    
    #0e476f Primary
    #156096 Secondary
    #c52125 Blocks
    
    setupCrafty: ->
      app = this
 */

(function() {
  Crafty.init(1920, 1080, document.getElementById('game'));

  Crafty.scene('intro', function() {
    var logo;
    logo = Crafty.e('2D, DOM, Image, Tween').attr({
      alpha: 0.0,
      x: 585,
      y: 165
    }).image('img/blox-logo.png').tween({
      alpha: 1.0
    }, 1700).css('background-size', '100% 100%');
    Crafty.background('#0e476f');
    return setTimeout(function() {
      logo.bind('TweenEnd', function() {
        return Crafty.scene('Game');
      });
      return logo.tween({
        alpha: 0.0
      }, 1700);
    }, 3000);
  });

  Crafty.scene('Game', function() {
    var a, blocksinterval, colors, draw, infotext, itemsinterval, leftBorder, loader, rightBorder, ship, spawnPosition, startTime, t, totalTime, tweenSpeed, winner;
    Crafty.c('Ship', {
      init: function() {
        return this.requires('2D, DOM, Collision, Image, Tween, Color, Twoway').attr({
          w: 50,
          h: 71,
          x: Crafty.math.randomInt(20, 1860),
          y: Crafty.math.randomInt(840, 870)
        }).image('img/ship.svg').onHit('HinderBlocks', function() {
          if (this.collidable) {
            return this.tween({
              y: 870
            }, 500);
          }
        }).bind('EnterFrame', function() {
          if (this.y > 100) {
            return this.y -= 0.5;
          }
        }).twoway(9).stopOnSolids().onHit('leftBorder', function() {
          return this.tween({
            x: this.x + 25
          }, 500);
        }).onHit('rightBorder', function() {
          return this.tween({
            x: this.x - 25
          }, 500);
        }).onHit('Booster', function() {
          if (this.y > 100) {
            this.y -= 3;
            return setTimeout(function() {
              return this.y -= 0.5;
            }, 1500);
          }
        }).onHit('Depresser', function() {
          if (this.y > 100) {
            this.y += 10;
            return setTimeout(function() {
              return this.y -= 0.5;
            }, 2000);
          }
        }).onHit('Shield', function() {
          var ship;
          this.attr({
            alpha: 0.4
          });
          this.collidable = false;
          ship = this;
          return setTimeout(function() {
            ship.collidable = true;
            return ship.attr({
              alpha: 1.0
            });
          }, 7000);
        }).collision(new Crafty.polygon([25, 0], [50, 71], [0, 71], [25, 0]));
      },
      stopOnSolids: function() {
        return this.onHit('Solid', this.stopMovement);
      },
      stopMovement: function() {
        this._speed = 0;
        if (this._movement != null) {
          this.x -= this._movement.x;
          return this.y -= this._movement.y;
        }
      },
      collidable: true
    });
    Crafty.c('HinderBlocks', {
      init: function() {
        return this.requires('2D, DOM, HitBox, Tween, Color, Image').color('#c52125').attr({
          w: 50,
          h: 50
        }).bind('EnterFrame', function() {
          if (this.y > 1080) {
            return this.destroy();
          }
        });
      }
    });
    Crafty.c('Booster', {
      init: function() {
        return this.requires('2D, DOM, Image, Tween').image('img/booster.png').attr({
          w: 140,
          y: 100
        }).bind('EnterFrame', function() {
          if (this.y > 1080) {
            return this.destroy();
          }
        });
      }
    });
    Crafty.c('Depresser', {
      init: function() {
        return this.requires('Booster').image('img/depresser.png');
      }
    });
    Crafty.c('Info', {
      init: function() {
        return this.requires('2D, DOM, Image, Tween').image('img/info.png').attr({
          x: 710,
          y: 50
        });
      }
    });
    Crafty.c('Shield', {
      init: function() {
        return this.requires('2D, DOM, Image, Tween').image('img/shield.png').attr({
          w: 70,
          h: 73
        }).bind('EnterFrame', function() {
          if (this.y > 1080) {
            return this.destroy();
          }
        });
      }
    });
    leftBorder = Crafty.e('leftBorder').requires('2D, DOM, Color, Solid').attr({
      x: 0,
      y: 0,
      w: 20,
      h: 1080
    }).color('#1771b0');
    rightBorder = Crafty.e('rightBorder').requires('2D, DOM, Color, Solid').attr({
      x: 1900,
      y: 0,
      w: 20,
      h: 1080
    }).color('#1771b0');
    infotext = Crafty.e('Info');
    ship = Crafty.e('Ship').attr({
      color: '#00ff00',
      z: 1000
    });
    $(ship._element).css({
      'background-image': ''
    });
    $.get('img/ship.svg', (function(_this) {
      return function(data) {
        var svg;
        svg = $(data).find('svg');
        svg = svg.removeAttr('xmlns:a');
        svg.find('path').css({
          fill: '#0f0'
        }).attr('stroke', '#0f0');
        return $(ship._element).append(svg);
      };
    })(this));

    /*for user in UserHandler.get().users
      app.addUser(user)
    
    UserHandler.get().on 'user_added', app.addUser #.bind(app)
    UserHandler.get().on 'user_removed', app.removeUser #.bind(app)
     */

    /*blocksinterval = setInterval -> #app
    
      side = 50
    
      for i in [0.. Crafty.math.randomInt(1, 10)]
        blocksPositionX = Crafty.math.randomInt(leftBorder._w, 1920 - (rightBorder._w + side))
        blocksPositionY = Crafty.math.randomInt(10, 100)
    
        Crafty.e('HinderBlocks')
        .attr({ x: blocksPositionX, y: 0 - side })
        .tween({ y: 1080 + 50}, 2700)
        blocksPositionX += 95
    , 1000
     */
    tweenSpeed = 2700;
    spawnPosition = Crafty.math.randomInt(leftBorder._w, 1920 - (rightBorder._w + 70));
    colors = ['#c52125'];
    blocksinterval = setInterval(function() {
      var blocksPositionX, degrees, i, j, randomColor, ref, results;
      randomColor = colors[Math.floor(Math.random() * colors.length)];
      switch (Crafty.math.randomInt(1, 10)) {
        case 1:
          setTimeout(2000);
          Crafty.e('HinderBlocks').attr({
            w: 800,
            x: leftBorder._w,
            y: 0 - 50
          }).color(randomColor).tween({
            y: 1080 + 50
          }, tweenSpeed);
          return Crafty.e('HinderBlocks').attr({
            w: 700,
            x: 1200,
            y: 0 - 50
          }).color(randomColor).tween({
            y: 1080 + 50
          }, tweenSpeed);
        default:
          results = [];
          for (i = j = 0, ref = Crafty.math.randomInt(1, 10); 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
            blocksPositionX = Crafty.math.randomInt(leftBorder._w, 1920 - (rightBorder._w + 50));
            if (Crafty.math.randomInt(0, 6) === 6) {
              degrees = Crafty.math.randomInt(0, 90);
            } else {
              degrees = 0;
            }
            Crafty.e('HinderBlocks').attr({
              x: blocksPositionX,
              y: 0 - 50
            }).color(randomColor).attr({
              w: Crafty.math.randomInt(50, 100),
              h: Crafty.math.randomInt(50, 100),
              rotation: degrees
            }).tween({
              y: 1080 + 50
            }, 2700);
            results.push(ship.image('leading.png'));
          }
          return results;
      }
    }, 1000);
    itemsinterval = setInterval(function() {
      var items;
      items = ['Shield'];
      if (1 === Crafty.math.randomInt(1, 10)) {
        return Crafty.e(items[Math.floor(Math.random() * items.length)]).attr({
          x: Crafty.math.randomInt(leftBorder._w, 1920 - (rightBorder._w + 70)),
          y: 0 - 70
        }).tween({
          y: 1080 + 100
        }, 2700);
      }
    }, 600);
    a = 0.0;
    t = 30.0;
    totalTime = 60000.0;
    startTime = Date.now();
    winner = null;
    loader = document.getElementById('loader');
    $('#countdown').show();
    draw = (function(_this) {
      return function() {
        var anim, mid, r, x, y;
        a = (Date.now() - startTime) / (totalTime / 360);
        r = a * Math.PI / 180;
        x = Math.sin(r) * 125;
        y = Math.cos(r) * -125;
        mid = a > 180 ? 1 : 0;
        anim = "M 0 0 v -125 A 125 125 1 " + mid + " 1 " + x + " " + y + " z";
        loader.setAttribute('d', anim);
        if (a <= 360.0) {
          return setTimeout(draw, t);
        }
      };
    })(this);
    draw();
    setTimeout(function() {
      return infotext.tween({
        alpha: 0.0
      }, 1000);
    }, 5000);
    setTimeout(function() {
      clearInterval(blocksinterval);
      clearInterval(itemsinterval);
      $('#countdown').hide();
      winner = _.min(Crafty('Ship').get(), function(s) {
        return s._y;
      });
      return Crafty.scene('Result');
    }, totalTime);
    return Crafty.scene('Result', function() {
      var logo, winnerText, winningShip;
      winningShip = Crafty.e('2D, DOM, Image, Tween').attr({
        w: 150,
        h: 213,
        x: 897.5,
        y: 500
      }).image('img/winnership.svg').tween({
        alpha: 1.0
      }, 1000);
      $(winningShip._element).css({
        'background-image': ''
      });
      $.get('img/winnership.svg', (function(_this) {
        return function(data) {
          var svg;
          svg = $(data).find('svg');
          svg = svg.removeAttr('xmlna:a');
          svg.find('path').css({
            fill: winner
          }).attr('stroke', winner);
          return $(winningShip._element).append(svg);
        };
      })(this));
      logo = Crafty.e('2D, DOM, Image, Tween').image('img/blox-text.png').attr({
        alpha: 0.0,
        x: 631.5,
        y: 170
      }).css('background-size', '100% 100%').tween({
        alpha: 1.0
      }, 1000);
      winnerText = Crafty.e('2D, DOM, Image, Tween').attr({
        alpha: 0.0,
        x: 802.5,
        y: 750
      }).tween({
        alpha: 1.0
      }, 1000).image('img/has-won.png');
      return setTimeout(function() {
        logo.bind('TweenEnd', function() {
          return Crafty.scene('intro');
        });
        logo.tween({
          alpha: 0.0
        }, 1000);
        winnerText.tween({
          alpha: 0.0
        }, 1000);
        winningShip.tween({
          alpha: 0.0
        }, 1000);
        return $('#winner').fadeOut(1000);
      }, 6000);
    });
  });

  Crafty.load({
    images: ['img/blox-logo.png', 'img/blox-text.png', 'img/info.png', 'img/has-won.png']
  }, (function(_this) {
    return function() {
      return Crafty.scene('intro');
    };
  })(this));

}).call(this);
